import java.text.SimpleDateFormat

node {
    def ISSUE_ID = "IAE-1"
    def shortCommit
  try {
    stage("Build with Unit Testing"){
            //Step #1. checkout the files
                echo 'Checking out the files from repo...' + env.BRANCH_NAME
                def mvnHome = tool 'M3'
                //Todo: find a right method
                //bitbucketStatusNotify(buildState: 'INPROGRESS')
                credentialsId: 'dinesh'
                git 'https://github.com/OctoDevOps/codelab.git'

            dir('SpringLab'){
                def targetVersion = "${env.BUILD_NUMBER}" //getDevVersion()
                print 'target build version...'
                print targetVersion
                sh "'${mvnHome}/bin/mvn' -Dintegration-tests.skip=true -Dbuild.number=${targetVersion} clean package"
                def pom = readMavenPom file: 'pom.xml'
                // get the current development version
                developmentArtifactVersion = "${pom.version}-${targetVersion}"
                print 'Build Artifact version:'
                print developmentArtifactVersion
                // execute the unit testing and collect the reports
                //junit '**//*target/unit-testing-reports/TEST-*.xml'
                archive 'target*//*.jar'
            }
         }

    stage("Deploy"){
        echo "Build package is readly to deploy"
    }

   print 'commit log ' + shortCommit
   print 'issue id ' +  ISSUE_ID   

   //Todo: find a method for the github
   // bitbucketStatusNotify(buildState: 'SUCCESSFUL')
   
    updateJira(${env.BUILD_NUMBER})
    //jiraComment(issueKey: "${ISSUE_ID}", body: "Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) was successful. Please go to ${env.BUILD_URL}.")
    print 'Updated JIRA sucessfully!'
    setBuildStatus("${context}", "Build # ${env.BUILD_NUMBER} is pass", 'SUCCESS',"${git}")

   }catch(err){
       //bitbucketStatusNotify(buildState: 'FAILED')
       //jiraComment(issueKey: "${ISSUE_ID}", body: "Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) was failed. Please go to ${env.BUILD_URL}.")
       currentBuild.result = "FAILURE"
       print 'error ' + err
       throw err
   } 
}


    /**
    * Updates Jira Fixed in build field with the build number and adds a comment in each related Jira issue
    * This requires the Jenkins JIRA Pipeline Steps plugin https://jenkinsci.github.io/jira-steps-plugin/getting-started/
    * @param build Build number that will be entered in the "Fixed in Build" Jira field
    */
  
    def updateJira(build) {
        def jiraServer = 'JIRA_LOCAL' // Define a Jira server entry in the Jenkins Jira Steps configuration named JIRA-PROD
    def jiraIssues = jiraIssueSelector(issueSelector: [$class: 'DefaultIssueSelector'])
        print 'Total # of Jira issues included in this build:' + jiraIssues.length
        jiraIssues.each { issue ->
            print 'JIRA #' + issue
            jiraAddComment comment: "{panel:bgColor=#97FF94}{code}Code was added to address this issue in build ${build}{code} {panel}", idOrKey: issue, site: jiraServer
            def fixedInBuild = [fields: [customfield_10121: build]] // This is a custom field named "Fixed in Build"
            jiraEditIssue idOrKey: issue, issue: fixedInBuild, site: jiraServer
        }
    }

    void setBuildStatus(context, message, state) {
    // partially hard coded URL because of https://issues.jenkins-ci.org/browse/JENKINS-36961, adjust to your own GitHub instance
    step([
        $class: "GitHubCommitStatusSetter",
        contextSource: [$class: "ManuallyEnteredCommitContextSource", context: context],
        reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://octodemo.com/${getRepoSlug()}"],
        errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
        statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
    ]);
    }

    def getChangeString() {
        MAX_MSG_LEN = 100
        def changeString = ""

        echo "Gathering SCM changes"
        def changeLogSets = currentBuild.changeSets
        for (int i = 0; i < changeLogSets.size(); i++) {
            def entries = changeLogSets[i].items
            for (int j = 0; j < entries.length; j++) {
                def entry = entries[j]
                truncated_msg = entry.msg.take(MAX_MSG_LEN)
                changeString += " - ${truncated_msg} [${entry.author}]\n"
            }
        }

        if (!changeString) {
            changeString = " - No new changes"
        }
        return changeString
    }

