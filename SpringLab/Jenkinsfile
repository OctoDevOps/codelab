import java.text.SimpleDateFormat
import java.lang.String

node {
    def shortCommit
  try {

       //Step #1. checkout the files
        stage ("Code checkout")  {
                credentialsId: 'dinesh'
                echo 'Checking out the files from repo...' + env.BRANCH_NAME
                git 'https://github.com/OctoDevOps/codelab.git'
                }
        dir('SpringLab') {
                def mvnHome = tool 'M3'
                def targetVersion = "${env.BUILD_NUMBER}" //getDevVersion()
                //Step #2. Build with unit testing
                stage("Build with Unit Testing ")
                {
                            print 'target build version...'
                            print targetVersion
                            withSonarQubeEnv('localhost_sonarqube') {
                                sh "pwd;'${mvnHome}/bin/mvn' -Dintegration-tests.skip=true -Dbuild.number=${targetVersion} clean compile test sonar:sonar"
                            }
                        }

                    // No need to occupy a node
                    stage("Quality Gate"){
                        withSonarQubeEnv('localhost_sonarqube') {
                            timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
                                def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
                                if (qg.status != 'OK') {
                                error "Pipeline aborted due to quality gate failure: ${qg.status}"
                                }
                                else{
                                    sh "pwd;'${mvnHome}/bin/mvn' -Dintegration-tests.skip=true -Dbuild.number=${targetVersion} package"
                                    def pom = readMavenPom file: 'pom.xml'
                                    // get the current development version
                                    developmentArtifactVersion = "${pom.version}-${targetVersion}"
                                    print 'Build Artifact version:'
                                    print developmentArtifactVersion
                                    // execute the unit testing and collect the reports
                                    //junit '**//*target/unit-testing-reports/TEST-*.xml'
                                    archiveArtifacts 'target*//*.jar'
                                }
                            }
                        }
                    }

                stage("Stop, Deploy and Restart"){
                    echo "Build package is ready to deploy"
                    // shutdown
                    sh 'curl -X POST http://localhost:8081/shutdown || true'
                    // copy file to target location, and start the application
                    sh 'cp target/*.jar /Users/dineshganesan/codelab/buildrun/;'
                    withEnv(['JENKINS_NODE_COOKIE=dontkill']) {
                         sh 'nohup java -Dserver.port=8081 -jar /Users/dineshganesan/codelab/buildrun/*.jar &'
                    }
                    echo "Successfully launched the app"
                    // wait for application to respond
                    //sh 'while ! httping -qc1 http://localhost:8081 ; do sleep 1 ; done'
                    }
                stage("Update JIRA"){
                        updateJira("${env.BUILD_NUMBER}")
                        //jiraComment(issueKey: "${ISSUE_ID}", body: "Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) was successful. Please go to ${env.BUILD_URL}.")
                        print 'Updated JIRA sucessfully!'

                        //setBuildStatus("ci/jenkins/build-status", "Build # ${env.BUILD_NUMBER} is pass", 'FAILURE')
                        setBuildStatus("ci/jenkins/build-status", "Build # ${env.BUILD_NUMBER} is pass", 'SUCCESS')
                    }

                stage("Integration Testing"){
                //    dir('/Users/dineshganesan/codelab/QA_Scripts') {
                        sh 'newman run ../QA_Scripts/JPT_Automation_Verison_Mgmt.postman_collection.json --reporters cli,junit,html --reporter-html-export index.html'
                        print 'Integration testing is compelte'
                //        }

                        //sh 'newman run tests/Newman/our.postman_collection.json -e tests/Newman/env/test.postman_environment.json -r junit,html --reporter-junit-export var/reports/newman/junit/newman.xml --reporter-html-export var/reports/newman/html/index.html'
                        //publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: true, reportDir: 'Integration', reportFiles: 'index.html', reportName: 'API Testing', reportTitles: 'JPT Automation'])

                    }
                }
   } catch(err){
       //bitbucketStatusNotify(buildState: 'FAILED')
       //jiraComment(issueKey: "${ISSUE_ID}", body: "Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) was failed. Please go to ${env.BUILD_URL}.")
       currentBuild.result = "FAILURE"
       print 'error ' + err
       throw err
   } 
   finally{
        print 'Generating HTML Repot ' + err
        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '/Users/dineshganesan/codelab/QA_Scripts/newman/', reportFiles: 'index.html', reportName: 'API Test Report', reportTitles: 'Integration Testing'])
        //junit '/Users/dineshganesan/codelab/QA_Scripts/**/*.xml' 
        
   }
}

    /**
    * Updates Jira Fixed in build field with the build number and adds a comment in each related Jira issue
    * This requires the Jenkins JIRA Pipeline Steps plugin https://jenkinsci.github.io/jira-steps-plugin/getting-started/
    * @param build Build number that will be entered in the "Fixed in Build" Jira field
    */
  
    def updateJira(build) {
        def jiraServer = 'JIRA_LOCAL' // Define a Jira server entry in the Jenkins Jira Steps configuration named JIRA-PROD
        def jiraIssues = jiraIssueSelector(issueSelector: [$class: 'DefaultIssueSelector'])
        //print 'Total # of Jira issues included in this build:' + jiraIssues.length
        jiraIssues.each { issue ->
            print 'JIRA #' + issue
            jiraAddComment comment: "{panel:bgColor=#97FF94}{code}Code was added to address this issue in build ${build}{code} {panel}", idOrKey: issue, site: jiraServer
            //def fixedInBuild = [fields: [customfield_10121: build]] // This is a custom field named "Fixed in Build"
            //jiraEditIssue idOrKey: issue, issue: fixedInBuild, site: jiraServer
        }
    }

    def setBuildStatus(context, message, state) {
    // partially hard coded URL because of https://issues.jenkins-ci.org/browse/JENKINS-36961, adjust to your own GitHub instance
    print "Publishing the build status"
    
        step([
            $class: "GitHubCommitStatusSetter",
            //contextSource: [$class: "ManuallyEnteredCommitContextSource", context: context],
            reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/OctoDevOps/codelab.git"],
            errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
            statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
        ]);
    }

    def getChangeString() {
        MAX_MSG_LEN = 100
        def changeString = ""

        echo "Gathering SCM changes"
        def changeLogSets = currentBuild.changeSets
        for (int i = 0; i < changeLogSets.size(); i++) {
            def entries = changeLogSets[i].items
            for (int j = 0; j < entries.length; j++) {
                def entry = entries[j]
                truncated_msg = entry.msg.take(MAX_MSG_LEN)
                changeString += " - ${truncated_msg} [${entry.author}]\n"
            }
        }

        if (!changeString) {
            changeString = " - No new changes"
        }
        return changeString
    }

/* to remove the build history from jenkinsfiles
    def jobName = "JPT_Automation"
    def job = Jenkins.instance.getItem(jobName)
    job.getBuilds().each { it.delete() }
    job.nextBuildNumber = 1
    job.save()
*/

/*
300  export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home
  301  echo $PATH
  302  export PATH=$PATH:$JAVA_HOME/bin
  303  echo $PATH
  304  history
  305  sh start-jira.sh
*/